<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- @Mapper와 패키지명, 인터페이스명 같아야함 -->
<mapper namespace="kr.co.sist.corp.mapper.JobPostingCorpMapper">    

<!-- 이메일로 유저 가져오기 : 임시데이터 생성에 사용 -->
<select id="selectUserInfo" parameterType="string" resultType="kr.co.sist.user.dto.UserDTO">
SELECT email, name FROM member WHERE email = #{email}
</select>

<!-- 새로운 공고 등록 -->
<insert id="insertJobPost" parameterType="kr.co.sist.corp.dto.JobPostingDTO">
	<selectKey keyProperty="jobPostingSeq" resultType="int" order="BEFORE">
		SELECT JOB_POSTING_SEQ.NEXTVAL FROM DUAL	
	</selectKey>

INSERT INTO job_posting (JOB_POSTING_SEQ, CORP_NO, POSITION_SEQ, POSTING_TITLE, POSTING_DETAIL, EXP_LEVEL,
    POSTING_END_DT, POSTING_START_DT, RECRUIT_CNT, EMPLOY_TYPE, WORKDAY, WORK_START_TIME, WORK_END_TIME,
    SALARY, CONT_START_DT, CONT_END_DT, EDU_LEVEL, VIEW_CNT, ZIPCODE, ROAD_ADDRESS, DETAIL_ADDRESS, REGION, DISTRICT)
VALUES (#{jobPostingSeq}, #{corpNo}, #{positionSeq}, #{postingTitle}, #{postingDetail}, #{expLevel},
    #{postingEndDt}, #{postingStartDt}, #{recruitCnt}, #{employType}, #{workday}, #{workStartTime}, #{workEndTime},
    #{salary}, #{contStartDt}, #{contEndDt}, #{eduLevel}, #{viewCnt}, #{zipcode}, #{roadAddress}, #{detailAddress}, #{region}, #{district} )
</insert>

<!-- 공고 수정 -->
<update id="modifyJobPost" parameterType="kr.co.sist.corp.dto.JobPostingDTO">
UPDATE job_posting SET
	CORP_NO = #{corpNo},
	POSITION_SEQ = #{positionSeq},
	POSTING_TITLE = #{postingTitle},
	POSTING_DETAIL = #{postingDetail},
	EXP_LEVEL = #{expLevel},
	POSTING_END_DT = #{postingEndDt},
	POSTING_START_DT = #{postingStartDt},
	RECRUIT_CNT = #{recruitCnt},
	EMPLOY_TYPE = #{employType},
	WORKDAY = #{workday},
	WORK_START_TIME = #{workStartTime},
	WORK_END_TIME = #{workEndTime},
	SALARY = #{salary},
	CONT_START_DT = #{contStartDt},
	CONT_END_DT = #{contEndDt},
	EDU_LEVEL = #{eduLevel},
	VIEW_CNT = #{viewCnt},
	ZIPCODE = #{zipcode},
	ROAD_ADDRESS = #{roadAddress},
	DETAIL_ADDRESS = #{detailAddress},
	REGION = #{region},
	DISTRICT = #{district}
WHERE JOB_POSTING_SEQ = #{jobPostingSeq}
</update>


<!-- 전체건수(total), 진행중건수(ing), 마감건수(end) -->
<select id="selectMyPostingCount" parameterType="java.lang.Long" resultType="map">
SELECT 
	COUNT(*) AS total_posting_cnt,
	COUNT(CASE WHEN jp.is_ended = 'N' THEN 1 END) AS ing_posting_cnt,
	COUNT(CASE WHEN jp.is_ended = 'Y' THEN 1 END) AS end_posting_cnt
FROM job_posting jp
WHERE jp.corp_no = #{corpNo}
</select>

<!-- 사업자등록번호로 모든 공고 목록 가져오기(사업자번호, 마감상태, 정렬순서), 비교에 #{}쓰지말고 변수명 그대로 쓰기   -->
<select id="selectMyAllPosting" resultType="kr.co.sist.corp.dto.JobPostingDTO" parameterType="kr.co.sist.corp.dto.JobPostingDTO">
	SELECT 	jp.JOB_POSTING_SEQ AS job_posting_seq,
			jp.CORP_NO AS corp_no, 
			jp.POSTING_TITLE AS posting_title, 
			jp.employ_type AS employ_type, 
			jp.exp_level AS exp_level, 
			jp.posting_start_dt AS posting_start_dt, 
			jp.posting_end_dt AS posting_end_dt, 
			c.CORP_NM AS corp_nm, 
			pc.position_name AS position_name, 
			LISTAGG(DISTINCT ts.stack_name, ', ') WITHIN GROUP (ORDER BY ts.TECH_STACK_SEQ) AS tech_names,
      count(DISTINCT ja.RESUME_SEQ) AS app_cnt, 
      jp.view_cnt AS view_cnt,
      jp.is_ended AS is_ended
	FROM job_posting jp 
	INNER JOIN company c on jp.corp_no = c.corp_no
	INNER JOIN job_posting_tech_stack jpts on jp.job_posting_seq = jpts.job_posting_seq
	INNER JOIN position_code pc on jp.position_seq = pc.position_seq 
	INNER JOIN tech_stack ts on jpts.tech_stack_seq = ts.tech_stack_seq
	LEFT JOIN job_application ja on jp.job_posting_seq = ja.job_posting_seq
	<choose>
		<when test="postSts == 'ing'">
	  	WHERE jp.corp_no = #{corpNo} AND jp.is_ended = 'N'
		</when>
		<when test="postSts == 'end'">
			WHERE jp.corp_no = #{corpNo} AND jp.is_ended = 'Y'
		</when>
		<when test="postSts == 'total'">
			WHERE jp.corp_no = #{corpNo}
		</when>
	</choose>
	GROUP BY jp.CORP_NO, jp.JOB_POSTING_SEQ, jp.POSTING_TITLE, c.CORP_NM, pc.position_name, jp.posting_start_dt, jp.posting_end_dt, jp.employ_type, jp.exp_level, jp.view_cnt, jp.is_ended
  <choose>
  	<when test="orderBy == 'start'">
   	ORDER BY jp.posting_start_dt DESC <!-- 최신순 -->
  	</when>
  	<when test="orderBy == 'end'">
    ORDER BY jp.posting_end_dt ASC <!-- 마감빠른순 -->
  	</when>
  	<when test="orderBy == 'viewCnt'">
    ORDER BY jp.view_cnt DESC <!-- 조회순 -->
  	</when>
  </choose>
</select>





<!-- 특정 공고 가져오기 : selectJobPost -->



<!-- 공고 수정 : modifyJobPost-->



<!-- 공고 마감 : finishJobPosting-->
<update id="finishJobPosting" parameterType="int" >
UPDATE job_posting SET is_ended = 'Y', posting_end_dt = TO_CHAR(SYSDATE, 'YYYY-MM-DD') WHERE job_posting_seq = #{jobPostingSeq}
</update>


<!-- 공고안에서 포지션리스트 키워드로 조회 -->
<select id="selectPostionList" parameterType="string" resultType="kr.co.sist.user.dto.PositionCodeDTO">
SELECT position_seq, position_name FROM POSITION_CODE 
WHERE position_name LIKE '%' || #{keyword} || '%'
</select>

<!-- 공고안에서 기술스택 키워드로 조회 -->
<select id="selectTechStackList" parameterType="string" resultType="kr.co.sist.user.dto.TechStackDTO">
SELECT tech_stack_seq, stack_name FROM TECH_STACK
WHERE UPPER(stack_name) LIKE UPPER( '%' || #{keyword} || '%' )
</select>


<!-- 지원자 통계 조회 -->



<!--  
	<	&lt;
	>	&gt;
	&	&amp;
	"	&quot;
	'	&apos; 
-->

</mapper>